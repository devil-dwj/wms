package main

import (
	"strings"
	"unicode"

	"github.com/devil-dwj/wms/cmd/protoc-gen-go-errors/errors"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
)

const (
	errorsPackage = protogen.GoImportPath("github.com/devil-dwj/wms/errors")
	fmtPackage    = protogen.GoImportPath("fmt")
)

var enCases = cases.Title(language.AmericanEnglish, cases.NoLower)

func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Enums) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + ".errors.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-errors. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	g.QualifiedGoIdent(fmtPackage.Ident(""))
	g.QualifiedGoIdent(errorsPackage.Ident(""))
	generateFileContent(gen, file, g)
	return g
}

func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	index := 0
	for _, enum := range file.Enums {
		if genErrorsFunc(gen, file, g, enum) {
			index++
		}
	}
	if index == 0 {
		g.Skip()
	}
}

func genErrorsFunc(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, enum *protogen.Enum) bool {
	defaultStatus := proto.GetExtension(enum.Desc.Options(), errors.E_DefaultStatus)
	status := 0
	if ok := defaultStatus.(int32); ok != 0 {
		status = int(ok)
	}
	if status == 0 {
		return false
	}
	if status > 600 || status < 0 {
		return false
	}

	e := err{}
	for _, v := range enum.Values {
		if v.Desc.Name() == "OK" {
			continue
		}
		statusInterface := proto.GetExtension(v.Desc.Options(), errors.E_Status)
		if ok := statusInterface.(int32); ok != 0 {
			status = int(ok)
		}
		e.Errors = append(e.Errors, &info{
			Name:       string(enum.Desc.Name()),
			CamelValue: case2Camel(string(v.Desc.Name())),
			Status:     status,
			CodeDsc:    string(v.Desc.Name()),
		})
	}
	if len(e.Errors) == 0 {
		return false
	}
	g.P(e.Execute())
	return true
}

func case2Camel(name string) string {
	if !strings.Contains(name, "_") {
		if name == strings.ToUpper(name) {
			name = strings.ToLower(name)
		}
		return enCases.String(name)
	}
	strs := strings.Split(name, "_")
	words := make([]string, 0, len(strs))
	for _, w := range strs {
		hasLower := false
		for _, r := range w {
			if unicode.IsLower(r) {
				hasLower = true
				break
			}
		}
		if !hasLower {
			w = strings.ToLower(w)
		}
		w = enCases.String(w)
		words = append(words, w)
	}

	return strings.Join(words, "")
}
